#include<fstream>
#include<iostream>
#include<vector>
#include <string>
#include<sstream>
#include <ros/ros.h>
#include <sensor_msgs/JointState.h>
#include <tf/transform_broadcaster.h>

using namespace std;
std::vector < std::vector<double> > jointAngleArray;

void readAngles(){
	double angleValue;
	std::vector<double> jointAngles;
	std::ifstream jointFile;
	jointFile.open("/home/paresh/sneha_gobar/Angle",std::ios::in);
	if(jointFile.is_open()){
		std::string temp;
		while(getline(jointFile,temp)){
			std::stringstream stream(temp);
			while(stream >> angleValue){
				jointAngles.push_back(angleValue);
			}
			jointAngleArray.push_back(jointAngles);
			jointAngles.clear();
		}
	}
	else{
	std::cout<<"error while opening file gobar";
	}
}
int main(int argc, char** argv) {
ros::init(argc, argv, "myRobot_move_joint");
ros::NodeHandle n;
readAngles();
cout<<jointAngleArray.size()<<endl;
cout<<jointAngleArray[1].size()<<endl;
for(int i=0;i<jointAngleArray.size();i++){
	for(int j=0;j<jointAngleArray[i].size();j++){
		cout << j <<" : "<<jointAngleArray[i][j]  << endl;	
	}  
}
	
ros::Publisher joint_pub = n.advertise<sensor_msgs::JointState>("joint_states", 1000);
tf::TransformBroadcaster broadcaster;
ros::Rate loop_rate(30);

//const double degree = M_PI/180;
double rot4 = 1;

geometry_msgs::TransformStamped odom_trans;
sensor_msgs::JointState joint_state;
odom_trans.header.frame_id = "odom";
odom_trans.child_frame_id = "base_link";

joint_state.name.resize(13);
joint_state.position.resize(13);
joint_state.name[0] ="one_outer_yaw_joint";
joint_state.name[1] ="one_outer_pitch_joint";
joint_state.name[2] ="one_outer_pitch_joint_1";
joint_state.name[3] ="one_outer_pitch_joint_2";
joint_state.name[4] ="one_outer_pitch_joint_3";
joint_state.name[5] ="one_outer_pitch_joint_4";
joint_state.name[6] ="one_outer_pitch_joint_5";
joint_state.name[7] ="one_outer_insertion_joint";
joint_state.name[8] ="one_outer_roll_joint";
joint_state.name[9] ="one_outer_wrist_pitch_joint";
joint_state.name[10] ="one_outer_wrist_yaw_joint";
joint_state.name[11] ="one_outer_wrist_open_angle_joint";
joint_state.name[12] ="one_outer_wrist_open_angle_joint_mimic";

int i=0;
int j=0;
while (ros::ok()) {

    //update joint_state
    if(i<jointAngleArray.size()){
    joint_state.header.stamp = ros::Time::now();
    joint_state.position[0] = jointAngleArray[i][j];
    joint_state.position[1] = jointAngleArray[i][j+1];
    joint_state.position[2] = jointAngleArray[i][j+2];
    joint_state.position[3] = jointAngleArray[i][j+3];
    joint_state.position[4] = jointAngleArray[i][j+4];
    joint_state.position[5] = jointAngleArray[i][j+5];
    joint_state.position[6] = jointAngleArray[i][j+6];
    joint_state.position[7] = jointAngleArray[i][j+7];
    joint_state.position[8] = jointAngleArray[i][j+8];
    joint_state.position[9] = jointAngleArray[i][j+9];
    joint_state.position[10] = jointAngleArray[i][j+10];
    joint_state.position[11] = jointAngleArray[i][j+11];
    joint_state.position[12] = jointAngleArray[i][j+12];
	i++;
	}else{
		i=0;
	}
	
    // update transform
    // (moving in a circle with radius=2)
    odom_trans.header.stamp = ros::Time::now();
    odom_trans.transform.translation.x = 0;
    odom_trans.transform.translation.y = 0;
    odom_trans.transform.translation.z = 0;
    odom_trans.transform.rotation = tf::createQuaternionMsgFromYaw(0);

    //send the joint state and transform
    joint_pub.publish(joint_state);
    broadcaster.sendTransform(odom_trans);

    rot4 += 1;
    if (rot4 > 90) rot4 = 0;

    loop_rate.sleep();
}
return 0;
}
